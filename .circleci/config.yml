# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7
        environment:
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.6.2
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test

    steps:
      - checkout

      - restore_cache:
          key: deps-{{ .Branch }}-{{ checksum "Pipfile.lock" }}

      - run:
          name: Install dependencies
          command: |
            sudo pip install pipenv
            pipenv install --dev

      - save_cache:
          paths:
            - ".venv"
          key: deps-{{ .Branch }}-{{ checksum "Pipfile.lock" }}

      - run:
          name: Print version
          command: |
            pipenv run ./setup.py --version

      - run:
          name: Run tests
          command: |
            pipenv run isort -rc --check --diff alogger
            pipenv run flake8 alogger
            mkdir test-reports
            pipenv run py.test --cov=alogger --junitxml=test-reports/junit.xml
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
          destination: test-reports

  verify-version:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - restore_cache:
          key: deps-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: Verify git tag vs. version
          command: |
            pipenv run ./setup.py verify --version "$CIRCLE_TAG"

  deploy-prod-pypi:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - restore_cache:
          key: deps-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          name: Init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USER" >> ~/.pypirc
            echo -e "password = $PYPI_PASS" >> ~/.pypirc
      - run:
          name: Create packages
          command: |
            pipenv run ./setup.py sdist bdist_wheel
      - run:
          name: Upload to pypi
          command: |
            pipenv run twine upload dist/*

workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - verify-version:
          context: pypi
          requires:
            - build
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - deploy-prod-pypi:
          context: pypi
          requires:
            - verify-version
          filters:
            tags:
              only: /.*/
